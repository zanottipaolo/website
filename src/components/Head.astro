---
import "../styles/global.css";
import { ViewTransitions } from "astro:transitions";

import "@fontsource/geist-sans";
import "@fontsource/geist-mono";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/og-image.jpeg" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/x-icon" href="/favicon.png" />

<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content="Paolo Zanotti" />
<meta
  name="keywords"
  content="Freelance, Software, Developer, Engineer, Portfolio, Blog, JavaScript, Python, Startup"
/>

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- PageFind -->
<link href="/pagefind/pagefind-ui.css" rel="stylesheet" />
<script is:inline src="/pagefind/pagefind-ui.js"></script>

<ViewTransitions />

<script is:inline>
  // for mobile menu
  let flagListener = false;

  function init() {
    preloadTheme();
    onScroll();
    animate();
    updateThemeButtons();
    addCopyCodeButtons();
    setGiscusTheme();
    toggleMenu();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const lightThemeButton = document.getElementById("light-theme-button");
    const darkThemeButton = document.getElementById("dark-theme-button");
    const systemThemeButton = document.getElementById("system-theme-button");

    lightThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "light");
      toggleTheme(false);
      updateThemeButtons();
    });

    darkThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "dark");
      toggleTheme(true);
      updateThemeButtons();
    });

    systemThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "system");
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
      updateThemeButtons();
    });

    window
      .matchMedia("(prefers-color-scheme: system)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
        }
      });

    document.addEventListener("scroll", onScroll);

    // Slider
    document.querySelectorAll(".slider").forEach((slider) => {
      const buttons = slider.querySelectorAll("[class^='btn-']");
      const elements = slider.querySelectorAll("[class^='element-']");

      buttons.forEach((button, index) => {
        button.addEventListener("click", function () {
          // Hide all testimonials in this slider
          elements.forEach((el) => {
            el.classList.add("hidden");
            el.classList.remove("block");
          });

          // Show the selected testimonial in this slider
          elements[index].classList.add("block");
          elements[index].classList.remove("hidden");

          // Reset all buttons' styles in this slider
          buttons.forEach((btn) => {
            btn.classList.remove(
              "bg-neutral-900",
              "dark:bg-white",
              "dark:text-black",
            );
            btn.classList.add("dark:text-white");
          });

          // Apply active styles to the clicked button in this slider
          button.classList.add(
            "bg-neutral-900",
            "dark:bg-white",
            "dark:text-black",
          );
          button.classList.remove("dark:text-white");
        });
      });
    });
  }

  function toggleMenu() {
    if (flagListener) return;
    const btnMobileMenu = document.getElementById("mobile-menu-button");
    const menu = document.getElementById("menu");

    const closeIcon = document.getElementById("close-menu-icon");
    const openIcon = document.getElementById("open-menu-icon");

    const toggleFunction = () => {
      if (!btnMobileMenu?.classList.contains("hidden")) {
        menu?.classList.toggle("hidden");
        menu?.classList.toggle("flex");

        if (menu?.classList.contains("flex")) {
          closeIcon?.classList.add("block");
          closeIcon?.classList.remove("hidden");

          openIcon?.classList.add("hidden");
          openIcon?.classList.remove("block");
        } else {
          closeIcon?.classList.remove("block");
          closeIcon?.classList.add("hidden");

          openIcon?.classList.remove("hidden");
          openIcon?.classList.add("block");
        }
      }
    };

    btnMobileMenu?.addEventListener("click", toggleFunction);

    flagListener = true;
  }

  function updateThemeButtons() {
    const theme = localStorage.getItem("theme");
    const lightThemeButton = document.getElementById("light-theme-button");
    const darkThemeButton = document.getElementById("dark-theme-button");
    const systemThemeButton = document.getElementById("system-theme-button");

    function removeActiveButtonTheme(button) {
      button?.classList.remove("bg-black/5");
      button?.classList.remove("dark:bg-white/5");
    }

    function addActiveButtonTheme(button) {
      button?.classList.add("bg-black/5");
      button?.classList.add("dark:bg-white/5");
    }

    removeActiveButtonTheme(lightThemeButton);
    removeActiveButtonTheme(darkThemeButton);
    removeActiveButtonTheme(systemThemeButton);

    if (theme === "light") {
      addActiveButtonTheme(lightThemeButton);
    } else if (theme === "dark") {
      addActiveButtonTheme(darkThemeButton);
    } else {
      addActiveButtonTheme(systemThemeButton);
    }
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 100);
    });
  }

  function onScroll() {
    if (
      window.scrollY > 0 &&
      document.documentElement.scrollHeight -
        window.innerHeight -
        window.scrollY >
        45
    ) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
      ),
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);

    setGiscusTheme();
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  function addCopyCodeButtons() {
    let copyButtonLabel = "ðŸ“‹";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    async function copyCode(codeBlock, copyButton) {
      const codeText = codeBlock.innerText;
      const buttonText = copyButton.innerText;
      const textToCopy = codeText.replace(buttonText, "");

      await navigator.clipboard.writeText(textToCopy);
      copyButton.innerText = "âœ…";

      setTimeout(() => {
        copyButton.innerText = copyButtonLabel;
      }, 2000);
    }

    for (let codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.innerText = copyButtonLabel;
      copyButton.classList = "copy-code";

      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton?.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }
  }

  const setGiscusTheme = () => {
    const giscus = document.querySelector(".giscus-frame");

    const isDark = document.documentElement.classList.contains("dark");

    if (giscus) {
      const url = new URL(giscus.src);
      url.searchParams.set("theme", isDark ? "dark" : "light");
      giscus.src = url.toString();
    }
  };

  // called on Header.astro
  const closeMenuOnClick = () => {
    const btnMobileMenu = document.getElementById("mobile-menu-button");
    const menu = document.getElementById("menu");

    const closeIcon = document.getElementById("close-menu-icon");
    const openIcon = document.getElementById("open-menu-icon");

    if (!btnMobileMenu?.classList.contains("hidden")) {
      menu?.classList.add("hidden");
      menu?.classList.remove("flex");

      closeIcon?.classList.remove("block");
      closeIcon?.classList.add("hidden");

      openIcon?.classList.remove("hidden");
      openIcon?.classList.add("block");
    }
  };

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());

  // close mobile menu when click outside of it
  document.addEventListener("click", (event) => {
    if (!document.getElementById("header").contains(event.target))
      closeMenuOnClick();
  });

  preloadTheme();
</script>
