---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import { BLOG } from "@consts";

const data = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

type Acc = {
  [year: string]: CollectionEntry<"blog">[];
};

const posts = data.reduce((acc: Acc, post) => {
  const year = post.data.date.getFullYear().toString();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {});

const years = Object.keys(posts).sort((a, b) => parseInt(b) - parseInt(a));

const uniqueCategories = ["tech", "travel", "books", "film", "music"];
---

<Layout title={BLOG.TITLE} description={BLOG.DESCRIPTION}>
  <Container>
    <aside>
      <div class="space-y-10">
        <h2 class="animate text-xl font-semibold text-black dark:text-white">
          Blog ðŸ’¬
        </h2>

        <!-- filter -->
        <div>
          <div class="mb-4 flex items-center justify-between gap-2 transition">
            <span class="font-medium">Filter by category</span>
          </div>

          <div>
            <ul class="flex flex-wrap items-center gap-4">
              {
                uniqueCategories.map((category) => (
                  <li>
                    <label for={category} class="flex items-center gap-2">
                      <input
                        type="checkbox"
                        id={category}
                        value={category}
                        class="size-5 hover:cursor-pointer"
                      />

                      <span class="text-sm font-medium  hover:cursor-pointer">
                        {category}
                      </span>
                    </label>
                  </li>
                ))
              }
            </ul>
          </div>
        </div>

        <hr />

        <!-- posts -->
        <div class="space-y-4" id="posts-section">
          {
            years.map((year) => (
              <section class="animate space-y-4">
                <div class="font-semibold text-black dark:text-white">
                  {year}
                </div>
                <div>
                  <ul class="not-prose flex flex-col gap-4">
                    {posts[year].map((post) => (
                      <li data-category={post.data.category}>
                        <ArrowCard entry={post} />
                      </li>
                    ))}
                  </ul>
                </div>
              </section>
            ))
          }
        </div>
      </div>
    </aside>
  </Container>
</Layout>
<script is:inline data-astro-rerun>
  function handleFilterPosts() {
    const checkedCategories =
      localStorage.getItem("checkedCategories")?.split(",") ?? [];

    filterPosts();

    function handleCategoryChange(event) {
      const category = event.target.value;
      if (event.target.checked) {
        // Add category to the list
        checkedCategories.push(category);
      } else {
        // Remove category from the list
        const index = checkedCategories.indexOf(category);
        if (index > -1) {
          checkedCategories.splice(index, 1);
        }
      }

      if (checkedCategories.length > 0)
        localStorage.setItem("checkedCategories", checkedCategories);
      else localStorage.removeItem("checkedCategories");

      filterPosts();
    }

    function filterPosts() {
      const years = document.querySelectorAll("#posts-section section");

      years.forEach((yearSection) => {
        const posts = yearSection.querySelectorAll("li");
        let hasVisiblePost = false;

        posts.forEach((post) => {
          const postCategories = post.getAttribute("data-category").split(",");
          if (
            checkedCategories.length === 0 ||
            postCategories.some((category) =>
              checkedCategories.includes(category),
            )
          ) {
            post.style.display = "";
            hasVisiblePost = true;
          } else {
            post.style.display = "none";
          }
        });

        // Hide or show the year section based on whether it has visible posts
        if (hasVisiblePost) {
          yearSection.style.display = "";
        } else {
          yearSection.style.display = "none";
        }
      });
    }

    // Attach the event listener to all checkboxes
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", handleCategoryChange);

      if (checkedCategories.includes(checkbox.value)) checkbox.checked = true;
    });
  }

  document.addEventListener("astro:page-load", () => handleFilterPosts());
</script>
